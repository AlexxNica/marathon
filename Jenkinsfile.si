#!/usr/bin/env groovy
def previousBuildFailed() {
    def previousResult = currentBuild.rawBuild.getPreviousBuild()?.getResult()
    return !hudson.model.Result.SUCCESS.equals(previousResult)
}

node('shakedown') {  try {
  wrap([$class: 'MesosSingleUseSlave']) {
  wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'XTerm']) {
    def timeout=360000

    properties([
      parameters([
        string(name: 'dcos_url',
          defaultValue: '',
          description: 'URL to DC/OS Enterprise Cluster'
        )]
      )
    ])

    stage('Checkout Repo') {
      checkout scm

      gitCommit = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
      shortCommit = gitCommit.take(8)
      echo 'env: '
      echo "#${env.BUILD_NUMBER}: ${shortCommit}"
    }

    stage('Installing Dependencies') {
      sh "pip3 install retrying"
    }

    stage('Run System Integration Tests'){
      withCredentials(
        [ [$class: 'FileBinding',
          credentialsId: '11fcc957-5156-4470-ae34-d433da88248a',
          variable: 'DOT_SHAKEDOWN'],
          [$class: 'FileBinding',
          credentialsId: '23743034-1ac4-49f7-b2e6-a661aee2d11b',
          variable: 'CLI_TEST_SSH_KEY']
        ]) {
          try {
            sh "cp -f \"${DOT_SHAKEDOWN}\" ~/.shakedown"
            sh """
              TERM=velocity shakedown \
                --stdout all \
                --stdout-inline \
                --timeout ${timeout} \
                --pytest-option "--junitxml=shakedown.xml" \
                --ssh-key-file \"${CLI_TEST_SSH_KEY}\" \
                --dcos-url $params.dcos_url tests/system
               """
          } finally {
            junit allowEmptyResults: true, testResults: 'shakedown.xml'
          }
        }
    }
  }
  }
  } catch (Exception err) {
      currentBuild.result = 'FAILURE'
      if( env.BRANCH_NAME.startsWith("releases/") || env.BRANCH_NAME == "master" ) {
        slackSend(
          message: "(;¬_¬) branch `${env.BRANCH_NAME}` failed in build `${env.BUILD_NUMBER}`. (<${env.BUILD_URL}|Open>)",
          color: "danger",
          channel: "#temp",
          tokenCredentialId: "f430eaac-958a-44cb-802a-6a943323a6a8")
      }
  } finally {
      if( env.BRANCH_NAME.startsWith("releases/") || env.BRANCH_NAME == "master" ) {
          // Last build failed but this succeeded.
          if( previousBuildFailed() && currentBuild.result == 'SUCCESS') {
            slackSend(
              message: "╭( ･ㅂ･)و ̑̑ branch `${env.BRANCH_NAME}` is green again. (<${env.BUILD_URL}|Open>)",
              color: "good",
              channel: "#temp",
              tokenCredentialId: "f430eaac-958a-44cb-802a-6a943323a6a8")
          }
      }
  }
}
